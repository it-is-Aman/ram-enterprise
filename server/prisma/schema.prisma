// Production-ready E-commerce Database Schema
// For bar accessories and similar products

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

model User {
  id        Int        @id @default(autoincrement())
  name      String
  email     String     @unique
  password  String
  phone     String?
  address   String?
  role      UserRole   @default(CUSTOMER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  cart      Cart?
  orders    Order[]
  reviews   Review[]
  wishlist  Wishlist?
  inquiries ProductInquiry[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  slug      String    @unique
  image     String?
  products  Product[]
  createdAt DateTime  @default(now())
}

model Product {
  id           Int              @id @default(autoincrement())
  name         String
  slug         String           @unique
  description  String?
  price        Float
  discount     Float            @default(0)
  stock        Int              @default(0)
  sku          String?          @unique
  weight       Float?
  dimensions   String?
  material     String?
  isActive     Boolean          @default(true)
  isFeatured   Boolean          @default(false)
  categoryId   Int
  category     Category         @relation(fields: [categoryId], references: [id])
  images       ProductImage[]
  variants     ProductVariant[]
  orderItems   OrderItem[]
  cartItems    CartItem[]
  reviews      Review[]
  wishlistItems WishlistItem[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  alt       String?
  isPrimary Boolean @default(false)
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductVariant {
  id        Int     @id @default(autoincrement())
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  name      String
  value     String
  price     Float?
  stock     Int     @default(0)
  sku       String  @unique
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int     @default(1)
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
}

model Order {
  id              Int         @id @default(autoincrement())
  userId          Int
  user            User        @relation(fields: [userId], references: [id])
  totalAmount     Float
  status          OrderStatus @default(PENDING)
  paymentId       String?
  paymentMethod   String?
  shippingAddress String
  shippingCity    String
  shippingState   String
  shippingPincode String
  shippingPhone   String
  trackingNumber  String?
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  items           OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  productId Int
  userId    Int
  rating    Int
  comment   String?
  isVerified Boolean @default(false)
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([productId, userId])
}

model Wishlist {
  id     Int            @id @default(autoincrement())
  userId Int            @unique
  user   User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items  WishlistItem[]
}

model WishlistItem {
  id         Int      @id @default(autoincrement())
  wishlistId Int
  productId  Int
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@unique([wishlistId, productId])
}

enum InquiryStatus {
  PENDING
  CONTACTED
  FULFILLED
  CLOSED
}

model ProductInquiry {
  id          Int           @id @default(autoincrement())
  name        String
  email       String
  phone       String?
  productName String
  message     String?
  quantity    Int?          @default(1)
  status      InquiryStatus @default(PENDING)
  userId      Int?
  user        User?         @relation(fields: [userId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}